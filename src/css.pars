/* Project:  COCKTAIL training
 * Descr:    A simple pocket computer (scanner, parser, AST construction)
 * Kind:     Parser specification
 * $Id: css.pars.in,v 1.6 2010/04/26 14:00:29 vollmer Exp $
 */

// Exercises:
//  - Add computation of the "Tree" Attribute to all grammar rules.
//  - Add grammar and tree construction rules to construct an AST for
//    "sin()", "cos()", and "tan()" (see css.ast)
//    Add a grammar and evaluation rule for the constant    "pi"
//  - Add more test sources to test your grammar

SCANNER css_scan

PARSER  css_pars

GLOBAL {
 # include <stdio.h>
 # include "Idents.h"
 # include "rString.h"
 # include "Tree.h"

}

PREC LEFT  '?'
     LEFT  '|'
     LEFT  '&'
     LEFT  '!'
     NONE  '<' '>' '='
     LEFT  '+' '-'
     LEFT  '*' '/'
     RIGHT '^'
     LEFT UNARY

RULE
root 	= stylesheet 
	  {=> {TreeRoot = ReverseTree (stylesheet:tree);};} 
	  .

stylesheet = ruleset_l 
	     {tree := mstylesheet_l(ruleset_l:tree);}
	     .

ruleset_l = <
  =
    {tree := mno_ruleset_l();}
    .
  = ruleset 
    {tree := mruleset_l(mno_ruleset_l(), ruleset:tree);}
    .
  = l:ruleset_l r:ruleset 
    {tree := mruleset_l (l:tree, r:tree);}
    .
  >.

ruleset = l:selector_const '{' r:declaration_l '}' 
	  {tree := mruleset(l:Selector, r:tree);}
	  .

declaration_l = <
  = /* epsilon */
      {tree := mno_declaration_l();}
    .
  = declaration 
    {tree := mdeclaration_l (mno_declaration_l(), declaration:tree);}
    .
  = l:declaration_l r:declaration 
    {tree := mdeclaration_l (l:tree, r:tree);}
    .
  >.
  
declaration = <
  = l:property_const ':' r:expr ';' 
    {tree := mdeclaration(l:Property, r:tree);}
    .
  >.
  
prio = "!important" 
      {tree := mprio ();}
      .
expr = < 
  = c:int_const 
    {tree := mint_const (c:Position, c:Value);}
    .
  = c:float_const 
    {tree := mfloat_const (c:Position, c:Value);}
    .
  = c:value_const
    {tree := mvalue_const (c:Position, c:Value);}
    .
  >.
  


/* Tokens */
Tokens:        [pos:  tPosition ]       {pos   := NoPosition; } <
  int_const:        [Value: long]       {Value := 0;  } .
  float_const:      [Value: double]     {Value := 0.0;} .
  selector_const:   [Selector: tIdent]     {Selector := NoIdent;  } .
  property_const:   [Property: tStringRef] {Property := PutString ("0", 1); } .
  value_const:      [Value: tStringRef] {Value := PutString ("0", 1); } .
> . // Tokens

/* non-terminal attributes */
MODULE attributes
PROPERTY SYN
DECLARE
 stylesheet
 declaration_l
 declaration
 prio
 expr
 ruleset_l
 ruleset = [tree: tTree].
END attributes

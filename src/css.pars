/* Project:  COCKTAIL training
 * Descr:    A simple pocket computer (scanner, parser, AST construction)
 * Kind:     Parser specification
 * $Id: css.pars.in,v 1.6 2010/04/26 14:00:29 vollmer Exp $
 */

// Exercises:
//  - Add computation of the "Tree" Attribute to all grammar rules.
//  - Add grammar and tree construction rules to construct an AST for
//    "sin()", "cos()", and "tan()" (see css.ast)
//    Add a grammar and evaluation rule for the constant    "pi"
//  - Add more test sources to test your grammar

SCANNER css_scan

PARSER  css_pars

GLOBAL {
 # include <stdio.h>
 # include "Idents.h"
 # include "rString.h"
 # include "Tree.h"

}

PREC LEFT  '?'
     LEFT  '|'
     LEFT  '&'
     LEFT  '!'
     NONE  '<' '>' '='
     LEFT  '+' '-'
     LEFT  '*' '/'
     RIGHT '^'
     LEFT UNARY

RULE
root 	= stylesheet .

stylesheet = ruleset_l .

ruleset_l = <
  = ruleset .
  = ruleset ruleset_l .
  >.

ruleset = selector_const '{' declaration_l '}' .

declaration_l = <
  = declaration .
  = declaration declaration_l .
  >.
  
declaration = <
  = property_const ':' expr ';' .
  = property_const ':' expr prio .
  >.
  
prio = "!important" .
expr = < c:int_const .
    = c:float_const .
    = value_const .
  >.
  


/* Tokens */
Tokens:        [pos:  tPosition ]       {pos   := NoPosition; } <
  int_const:        [Value: long]       {Value := 0;  } .
  float_const:      [Value: double]     {Value := 0.0;} .
  selector_const:   [Selector: tIdent]     {Selector := NoIdent;  } .
  property_const:   [Property: tStringRef] {Property := PutString ("0", 1); } .
  value_const:      [Value: tStringRef] {Value := PutString ("0", 1); } .
> . // Tokens

/* non-terminal attributes */
MODULE attributes
PROPERTY SYN
DECLARE
 css
 css_l = [tree: tTree].
END attributes

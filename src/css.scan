/* Project:  COCKTAIL training
 * Descr:    A simple pocket computer (scanner, parser, evaluator)
 * Kind:     Scanner specification
 * Author:   Prof. Dr. Juergen Vollmer <vollmer@dhbw-karlsruhe.de>
 * $Id: css.scan,v 1.3 2010/04/23 20:39:36 vollmer Exp $
 */

SCANNER css_scan

EXPORT {
/* code to be put intp Scanner.h */
# include "Position.h"

/* Token Attributes.
 * For each token with user defined attributes, we need a typedef for the
 * token attributes.
 * LPP extracts the token-attribute declaration from the parser specification.
 * They are inserted here.
  */
  typedef int tToken;
  typedef struct {tPosition Pos; char* Value;} tselector;
  typedef struct {tPosition Pos; int Value;} tint_const;
  typedef struct {tPosition Pos; double Value;} tfloat_const;
  typedef struct {tPosition Pos; char* Value;} tproperty;
  typedef struct {tPosition Pos; char* Value;} tvalue;


  typedef union {
    tPosition   Position;
    tselector selector;
    tint_const int_const;
    tfloat_const float_const;
    tproperty property;
    tvalue value;
  } css_scan_tScanAttribute;

  #define TOK_INT_CONST 1
  #define TOK_FLOAT_CONST 2
  #define TOK_SELECTOR  3
  #define TOK_PROPERTY  4
  #define TOK_VALUE     5
  

}

GLOBAL {
/* code to be put into Scanner.c */
# include <stdlib.h>
/* Insert the routine computing "error-values" of attributes, in case the
 * parser decides during error repair to insert a token.
 */
INSERT ErrorAttribute
}

LOCAL {
/* user-defined local variables of the generated GetToken routine */
# define MAX_STRING_LEN 2048
char string[MAX_STRING_LEN];
int nesting = 0;
}

DEFAULT {
  /* What happens if no scanner rule matches the input */
  MessageI ("Illegal character",
	    xxError, css_scan_Attribute.Position,
	    xxCharacter, css_scan_TokenPtr);
}

EOF {
  /* What should be done if the end-of-input-file has been reached? */

  /* E.g.: check hat strings and comments are closed. */
  switch (yyStartState) {
  case STD:
    /* ok */
    break;
  case COMMENT:
    Message ("unclosed C-comment",
	     xxError, css_scan_Attribute.Position);
    break;
  case DECLARATION:
    Message ("unclosed declaration. '}' expected!",
         xxError, css_scan_Attribute.Position);
    break;
  default:
    Message ("OOPS: that should not happen!!",
	     xxFatal, css_scan_Attribute.Position);
    break;
  }

  /* implicit: return the EofToken */
}

DEFINE /* some abbreviations */
  digit  = {0-9} .
  letter = {a-zA-Z} .
  props = ("azimuth"|"background-attachment"|"background-color"|"background-image"|"background-position"|"background-repeat"|"background"|"border-collapse"|"border-color"|"border-spacing"|"border-style"|"border-top"|"border-right"|"border-bottom"|"border-left"|"border-top-color"|"border-right-color"|"border-bottom-color"|"border-left-color"|"border-top-style"|"border-right-style"|"border-bottom-style"|"border-left-style"|"border-top-width"|"border-right-width"|"border-bottom-width"|"border-left-width"|"border-width"|"border"|"bottom"|"caption-side"|"clear"|"clip"|"color"|"content"|"counter-increment"|"counter-reset"|"cue-after"|"cue-before"|"cue"|"cursor"|"direction"|"display"|"elevation"|"empty-cells"|"float"|"font-family"|"font-size"|"font-style"|"font-variant"|"font-weight"|"font"|"height"|"left"|"letter-spacing"|"line-height"|"list-style-image"|"list-style-position"|"list-style-type"|"list-style"|"margin-right"|"margin-left"|"margin-top"|"margin-bottom"|"margin"|"max-height"|"max-width"|"min-height"|"min-width"|"orphans"|"outline-color"|"outline-style"|"outline-width"|"outline"|"overflow"|"padding-top"|"padding-right"|"padding-bottom"|"padding-left"|"padding"|"page-break-after"|"page-break-before"|"page-break-inside"|"pause-after"|"pause-before"|"pause"|"pitch-range"|"pitch"|"play-during"|"position"|"quotes"|"richness"|"right"|"speak-header"|"speak-numeral"|"speak-punctuation"|"speak"|"speech-rate"|"stress"|"table-layout"|"text-align"|"text-decoration"|"text-indent"|"text-transform"|"top"|"unicode-bidi"|"vertical-align"|"visibility"|"voice-family"|"volume"|"white-space"|"widows"|"width"|"word-spacing"|"z-index").

/* define start states, note STD is defined by default */
START DECLARATION, COMMENT

RULES

/* INSERT RULES #STD# */


/* SELECTOR */
#STD# (letter | {#_.})[1] (letter*|digit*) :
{
  css_scan_GetWord (string);
  css_scan_Attribute.selector.Value = string;
  return TOK_SELECTOR;
}
   
#STD# "{":
{
  yyStart (DECLARATION); /* --> In Zustand #DECLARATION# */
}

#DECLARATION# "}":
{
  yyStart (STD);/* --> In Zustand STD aus DECLARATION */
}


/* Property */
#DECLARATION# props:
{
  css_scan_GetWord (string);
  css_scan_Attribute.property.Value = string;
  return TOK_PROPERTY; 
}

/* VALUE */
#DECLARATION# (letter*|digit*|"#")+ :
{
  css_scan_GetWord (string);
  css_scan_Attribute.value.Value = string;
  return TOK_VALUE; 
}
